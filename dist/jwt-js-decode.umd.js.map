{"version":3,"file":"jwt-js-decode.umd.js","sources":["../src/jwt-js-decode.ts"],"sourcesContent":["import pako from \"pako\";\r\n\r\ndeclare namespace Pako {\r\n    export interface DeflateOptions {\r\n        raw?: boolean;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n\r\n    export interface InflateOptions {\r\n        raw?: boolean;\r\n        from?: string;\r\n        to?: string;\r\n    }\r\n}\r\n\r\nexport class JwtSplit {\r\n    header: string;\r\n    payload: string;\r\n    signature: string;\r\n\r\n    constructor(str: string) {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n\r\n        const jwtArr = str.split('.');\r\n        if (jwtArr.length !== 3) {\r\n            throw new Error(\"Illegal jwt string!\");\r\n        }\r\n\r\n        const [header, payload, signature] = jwtArr;\r\n        this.header = header;\r\n        this.payload = payload;\r\n        this.signature = signature;\r\n    }\r\n}\r\n\r\nexport interface JwtPart {\r\n    [key: string]: any\r\n}\r\n\r\nexport class JwtDecode {\r\n    header: JwtPart;\r\n    payload: JwtPart;\r\n    signature: string;\r\n\r\n    constructor(str: string) {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n        const jwtSplit: JwtSplit = JwtJsDecode.jwtSplit(str);\r\n\r\n        this.header = JSON.parse(JwtJsDecode.bu2s(jwtSplit.header));\r\n        this.payload = JwtJsDecode.isGzip(this.header) ? JSON.parse(JwtJsDecode.zbu2s(jwtSplit.payload)) : JSON.parse(JwtJsDecode.bu2s(jwtSplit.payload));\r\n        this.signature = jwtSplit.signature;\r\n    }\r\n}\r\n\r\nexport class JwtJsDecode {\r\n    /**\r\n     * Converts base64url string to base64 string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} base64 string\r\n     */\r\n    static bu2b(str: string): string {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n        if (str.length % 4 === 1) {\r\n            throw new Error(\"Illegal base64url string!\");\r\n        }\r\n\r\n        for (; (str.length % 4 !== 0);) {\r\n            str += \"=\";\r\n        }\r\n        return str\r\n            .replace(/\\-/g, \"+\")\r\n            .replace(/_/g, \"/\");\r\n    }\r\n\r\n    /**\r\n     * Converts base64 string to base64url string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} base64url string\r\n     */\r\n    static b2bu(str: string): string {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n        if (str.length % 4 !== 0) {\r\n            throw new Error(\"Illegal base64 string!\");\r\n        }\r\n\r\n        return str\r\n            .replace(/\\+/g, \"-\")\r\n            .replace(/\\//g, \"_\")\r\n            .replace(/=/g, \"\");\r\n    }\r\n\r\n    /**\r\n     * Converts base64url string to string\r\n     *\r\n     * @param {string} str - base64url string to convert\r\n     *\r\n     * @returns {string} decoded data string\r\n     */\r\n    static bu2s(str: string): string {\r\n        return this.b2s(this.bu2b(str));\r\n    }\r\n\r\n    /**\r\n     * Converts string to base64url string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} base64url string\r\n     */\r\n    static s2bu(str: string): string {\r\n        return this.b2bu(this.s2b(str));\r\n    }\r\n\r\n    /**\r\n     * Converts base64 string to string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     */\r\n    static s2b(str: string): string {\r\n        return btoa(str);\r\n    }\r\n\r\n    /**\r\n     * Converts string to base64 string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} decoded data string\r\n     */\r\n    static b2s(str: string): string {\r\n        return atob(str);\r\n    }\r\n\r\n    /**\r\n     * Converts string to gzip data string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} gzip data string\r\n     */\r\n    static zip(str: string) {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n        return pako.deflate(str, {\r\n            raw: false,\r\n            from: \"string\",\r\n            to: \"string\"\r\n        } as Pako.DeflateOptions & { to: \"string\" });\r\n    }\r\n\r\n    /**\r\n     * Converts from gzip data string to string\r\n     *\r\n     * @param {string} str - data string to convert\r\n     *\r\n     * @returns {string} decoded data string\r\n     */\r\n    static unzip(str: string) {\r\n        if (typeof str !== \"string\") {\r\n            throw new Error(\"Illegal parameter specified!\");\r\n        }\r\n        return pako.inflate(str, {\r\n            raw: false,\r\n            from: 'string',\r\n            to: 'string'\r\n        } as Pako.InflateOptions & { to: \"string\" });\r\n    }\r\n\r\n    /**\r\n     * Gzip and encode data string to base64url string\r\n     *\r\n     * @param {string} str - data string to encode\r\n     *\r\n     * @returns {string} base64url string\r\n     */\r\n    static s2zbu(str: string) {\r\n        return this.s2bu(this.zip(str));\r\n    }\r\n\r\n    /**\r\n     * Decode from base64url and unzip data string\r\n     *\r\n     * @param {string} str - data string to decode\r\n     *\r\n     * @returns {string} decoded data string\r\n     */\r\n    static zbu2s(str: string) {\r\n        return this.unzip(this.bu2s(str));\r\n    }\r\n\r\n    /**\r\n     * Split jwtToken into object {header, payload, signature}\r\n     *\r\n     * @param {string} str - data string to split\r\n     *\r\n     * @returns {JwtSplit} jwt split object of three strings\r\n     */\r\n    static jwtSplit(str: string): JwtSplit {\r\n        return new JwtSplit(str);\r\n    }\r\n\r\n    /**\r\n     * Check if header has zip property (and it is equal to 'GZIP', ignorecase)\r\n     *\r\n     * @param {string} header - object to check\r\n     *\r\n     * @returns {boolean} does it have gzip in zip property\r\n     */\r\n    static isGzip(header: JwtPart): boolean {\r\n        return typeof header === 'object' && typeof header.zip === 'string' && header.zip.toUpperCase() === 'GZIP'\r\n    }\r\n\r\n    /**\r\n     * Decode jwtToken header and payload\r\n     *\r\n     * @param {string} str - data string to decode\r\n     *\r\n     * @returns {JwtDecode} object with decoded header and body, and signature untouched\r\n     */\r\n    static jwtDecode(str: string): JwtDecode {\r\n        return new JwtDecode(str);\r\n    }\r\n}\r\n\r\nexport default JwtJsDecode;\r\n"],"names":[],"mappings":";;;;;;;;;QAqBI,kBAAY,GAAW;YACnB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YAED,IAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;aAC1C;YAEM,IAAA,kBAAM,EAAE,mBAAO,EAAE,qBAAS,CAAW;YAC5C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;QACL,eAAC;IAAD,CAAC,IAAA;;QAWG,mBAAY,GAAW;YACnB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,IAAM,QAAQ,GAAa,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAErD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5D,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YAClJ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;SACvC;QACL,gBAAC;IAAD,CAAC,IAAA;;QAED;SAiLC;;;;;;;;QAzKU,gBAAI,GAAX,UAAY,GAAW;YACnB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;aAChD;YAED,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI;gBAC5B,GAAG,IAAI,GAAG,CAAC;aACd;YACD,OAAO,GAAG;iBACL,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;iBACnB,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SAC3B;;;;;;;;QASM,gBAAI,GAAX,UAAY,GAAW;YACnB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;gBACtB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC7C;YAED,OAAO,GAAG;iBACL,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;iBACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;iBACnB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC1B;;;;;;;;QASM,gBAAI,GAAX,UAAY,GAAW;YACnB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;;;;;;;QASM,gBAAI,GAAX,UAAY,GAAW;YACnB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;;;;;QAOM,eAAG,GAAV,UAAW,GAAW;YAClB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;;;;;;;;QASM,eAAG,GAAV,UAAW,GAAW;YAClB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;;;;;;;;QASM,eAAG,GAAV,UAAW,GAAW;YAClB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE,QAAQ;gBACd,EAAE,EAAE,QAAQ;aAC2B,CAAC,CAAC;SAChD;;;;;;;;QASM,iBAAK,GAAZ,UAAa,GAAW;YACpB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACnD;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE,QAAQ;gBACd,EAAE,EAAE,QAAQ;aAC2B,CAAC,CAAC;SAChD;;;;;;;;QASM,iBAAK,GAAZ,UAAa,GAAW;YACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;;;;;;;;QASM,iBAAK,GAAZ,UAAa,GAAW;YACpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SACrC;;;;;;;;QASM,oBAAQ,GAAf,UAAgB,GAAW;YACvB,OAAO,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC;SAC5B;;;;;;;;QASM,kBAAM,GAAb,UAAc,MAAe;YACzB,OAAO,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,IAAI,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,MAAM,CAAA;SAC7G;;;;;;;;QASM,qBAAS,GAAhB,UAAiB,GAAW;YACxB,OAAO,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;SAC7B;QACL,kBAAC;IAAD,CAAC;;;;;;;;;;;;;;;"}